package ch.fhnw.tvver;

import java.io.File;
import java.io.IOException;
import java.util.EnumSet;

import javax.sound.sampled.UnsupportedAudioFileException;

import ddf.minim.analysis.FFT;

public class FFTBeatDetection extends AbstractBeatTracker {


	final  int   FREQ       = (int)getSampleRate();
	final  int   TIME_SIZE  = 1024;
	final  float TIME_LIMIT = 0.5f;
	
	public FFTBeatDetection(File track)throws UnsupportedAudioFileException, IOException {
		super(track, EnumSet.of(Flags.REPORT));		
		
		
		
	}
	
	
	
	
	
	@Override
	public void run() {
		try{
			
			float[] buffer = new float[TIME_SIZE];
			FFT fft = new FFT(TIME_SIZE,FREQ);
			fft.logAverages(43, 1); //?
			int bands = fft.avgSize();
			boolean[] onSetBuffer = new boolean[ bands];
			float[][] freqBandEnergyHistory     = new float[ bands ][ FREQ / TIME_SIZE ];
			float[][] freqBandDifferenceHistory = new float[ bands ][ FREQ / TIME_SIZE ];			
			float[] timeBand = new float[ bands ];
			
			float dTime = (float) TIME_SIZE / FREQ; 
			
			int insertAt = 0;
			
			while( getSamples(buffer) ){
				
				fft.forward( buffer );
				//float instant, E, V, C, diff, dAvg, diff2;
				for (int i = 0; i < freqBandEnergyHistory.length; i++) {
					float e = fft.getAvg(i);
					
					float E = 0;
					for (int j = 0; j < freqBandEnergyHistory.length; j++) {
						E += freqBandEnergyHistory[i][j];
					}
					E /= freqBandEnergyHistory.length;
					
					float V = 0;
					for (int j = 0; j < freqBandEnergyHistory.length; j++) {
						V += (float)Math.pow(freqBandEnergyHistory[i][j] - E, 2);						
					}
					V /= freqBandEnergyHistory.length;
					
					float C = (-0.0025714f * V) + 1.5142857f;
					
					float d = (float)Math.max(e *0.9 - C * E, 0);
					
					float D = 0;		
					int countNonZero = 0;
					for (int j = 0; j < freqBandDifferenceHistory.length; j++) {
						if( freqBandDifferenceHistory[i][j] > 0 ){
							D += freqBandDifferenceHistory[i][j];
							countNonZero++;
						}			
					}									
					D = (countNonZero>0)? D / countNonZero : 0;
					
					float diffdiff = (float)Math.max(d - D, 0);
					
					timeBand[i] += dTime;
					
					//System.out.println(time);
					
									
					if( timeBand[i] >= TIME_LIMIT && diffdiff > 0 && e > 2 ){
						timeBand[i] = 0;
						onSetBuffer[i] = true;
						//isBeat = true;
					}else{
						onSetBuffer[i] = false;
					}
					
					freqBandEnergyHistory[i][insertAt] = e;
					freqBandDifferenceHistory[i][insertAt] = d;
					
				}
				
				insertAt++;
				if (insertAt >= FREQ / TIME_SIZE){
					insertAt = 0;
				}
				
				boolean isBeat = false;
				for (int j = 0; j < onSetBuffer.length; j++) {
					if(onSetBuffer[j]) isBeat = true;
				}
				if(isBeat)beat();
				
				
			}
				
				
				
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	
	

}
