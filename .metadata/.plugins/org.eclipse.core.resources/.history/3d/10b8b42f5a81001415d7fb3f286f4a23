package ch.fhnw.tvver;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;

import javax.sound.sampled.UnsupportedAudioFileException;

import org.jtransforms.fft.FloatFFT_1D;

import ddf.minim.analysis.FFT;

public class BetterFFTBeatDetection extends AbstractBeatTracker {

	public BetterFFTBeatDetection(File track)
			throws UnsupportedAudioFileException, IOException {
		super(track, EnumSet.of(Flags.REPORT));

	}

	@Override
	public void run() {

		FFT fft = new FFT(1024, 44100);
		fft.window(FFT.HAMMING);
		float[] samples = new float[1024];
		float[] spectrum = new float[1024 / 2 + 1];
		float[] lastSpectrum = new float[1024 / 2 + 1];
		List spectralFlux = new ArrayList();
		List threshold = new ArrayList();

		try {

			while (getSamples( samples )) {

				fft.forward( samples );
				System.arraycopy( fft.getSpectrumReal(), 0, spectrum, 0, spectrum.length );
				for (int i = 0; i < spectrum.length; i++) {
					System.out.print(spectrum[i]+" ");
				}
				System.out.println();
				// buffer = new float[ BUFFER_SIZE ];
				// float[] buffer2 = new float[ BUFFER_SIZE ];
				//
				// FloatFFT_1D fft_do = new FloatFFT_1D(BUFFER_SIZE);
				// float[] fft = new float[BUFFER_SIZE * 2];
				// System.arraycopy(buffer, 0, fft, 0, BUFFER_SIZE);
				// fft_do.complexForward( fft );
				// fft_do.realForward(buffer);
				//
				// fft.forward( buffer );
				//
				// System.arraycopy( spectrum, 0, lastspectrum, 0,
				// spectrum.length );
				// System.arraycopy( fft.getSpectrumReal(), 0, spectrum, 0,
				// spectrum.length );
				//
				// float flux = 0;
				// for( int i = 0; i < spectrum.length; i++ ){
				// //flux += ( spectrum[i] - lastspectrum[i] );
				// }
				//
				// //spectralFlux.add( flux );
				//
				// System.out.println("-------------------------------------");
				//
				// // for (int i = 0; i < BUFFER_SIZE; i++) {
				// // //System.out.println(buffer[i]);
				// //// int index = i*2;
				// //// float re = fft[ index ];
				// //// float im = fft[ index + 1];
				// ////
				// //// spectrum[i] = (float) Math.sqrt( Math.pow( re, 2 ) +
				// Math.pow( im, 2 ) );
				// //
				// //
				// // System.out.println(spectrum[i]);
				// // }
				// //
				// // if(x>43)break;
				// // x++;

			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
