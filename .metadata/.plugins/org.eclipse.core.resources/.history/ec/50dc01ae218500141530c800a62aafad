package ch.fhnw.tvver;

import java.io.File;
import java.io.IOException;
import java.util.EnumSet;

import javax.sound.sampled.UnsupportedAudioFileException;

public class StatisticalStreamingBeatDetection extends AbstractBeatTracker {
	
	final  int    FREQ      = (int)getSampleRate();
	final  int   TIME_SIZE  = 1024;
	final  float TIME_LIMIT = 0.3f;
	
	private float[] energyHistory;
	private float[] differenceHistory;
	
	private float[] buffer;
	
	private int energyHistoryIndex;
	private int differenceHistoryIndex;
	
	private float time;
	private float dTime;
	
	private boolean isBeat = false;

	public StatisticalStreamingBeatDetection(File track)throws UnsupportedAudioFileException, IOException {
		super(track, EnumSet.of(Flags.REPORT, Flags.WAVE));
		 buffer            = new float[ TIME_SIZE ];
		 energyHistory     = new float[ FREQ / TIME_SIZE ];
		 differenceHistory = new float[ FREQ / TIME_SIZE ];
		 energyHistoryIndex     = 0;
		 differenceHistoryIndex = 0;
		 time = 0;
		 dTime  = (float) TIME_SIZE / FREQ; 
	}
	
	
	@Override
	public void run() {
		//System.out.println("asdfasdfasfd");
		
		
		try {
			while( getSamples(buffer) ){
				float e = calculateInstantSoundEnergy( buffer );
				float E = calculateLocalAverageEnergy();
				
				float V = calculateVariance(E);
				float C = (-0.0025714f * V) + 1.5142857f;
				
				float d = (float)Math.max(e - C * E, 0);				
				float D = calculateAverageDifference();
				
				float diffdiff = (float)Math.max(d - D, 0);
				
				time += dTime;
				
				//System.out.println(time);
				
								
				if( time >= TIME_LIMIT && diffdiff > 0 && e > 2 ){
					time = 0;
					beat();
					//isBeat = true;
				}
				
				
				addToHistory(e, energyHistory, energyHistoryIndex);
				addToHistory(d, differenceHistory, differenceHistoryIndex);
				//addBufferToHistory(buffer);
				
				//if(e > (c*E))System.out.println( "Sound Energy: "+e+" Energy Average: "+(c*E) );
				//if(e>(c*E))beat();
				
				
				//System.out.println(c);
				
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	private float calculateLocalAverageEnergy(){
		float E = 0;		
		for (int i = 0; i < energyHistory.length; i++) {		
			E += energyHistory[i];
		}
		return E / energyHistory.length;
	}
	
	private float calculateAverageDifference(){
		float D = 0;		
		int countNonZero = 0;
		for (int i = 0; i < differenceHistory.length; i++) {
			if( differenceHistory[i] > 0 ){
				D += differenceHistory[i];
				countNonZero++;
			}			
		}
						
		return (countNonZero>0)? D / countNonZero : 0;
	}
	
	private static void addToHistory( float e, float[] history, int index ){		
		history[ index ] = e;
		index++;
		if( index >= history.length )index = 0;
	}
	
//	private void addBufferToHistory( float[] buffer ){
//		System.out.println(historyIndex);
//		System.arraycopy(buffer, 0, energyHistory, historyIndex, 1024);
//		historyIndex+=1024;
//		if( historyIndex >= 44032 )historyIndex = 0;
//		//energyHistory[ historyIndex ] = e;
//	}
	
	private static float calculateInstantSoundEnergy( float[] buffer ){
		float e = 0;
		for (int i = 0; i < buffer.length; i++) {			
			e+=buffer[i]*buffer[i];
		}
		e/=buffer.length; 
		return (float) Math.sqrt(e) * 100;
	}
	
	private float calculateVariance(float E){
		float V = 0;
		for (int i = 0; i < energyHistory.length; i++) {
				V += (float)Math.pow( energyHistory[i]-E, 2);	
		}
		return  V / energyHistory.length;
	}

}
