package ch.fhnw.tvver;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;

import javax.sound.sampled.UnsupportedAudioFileException;

import ch.fhnw.tools.Plot;
import ddf.minim.analysis.FFT;

public class BetterFFTBeatDetection extends AbstractBeatTracker {
	
	
	final static int BUFFER_SIZE = 1024;	
	
	private float[] buffer; 
	
	private float[] spectrum;
	private float[] lastspectrum;
	private FFT fft;
	private List<Float> spectralFlux;
	
	public BetterFFTBeatDetection(File track)throws UnsupportedAudioFileException, IOException {
		super(track, EnumSet.of(Flags.REPORT));		
		buffer = new float[ BUFFER_SIZE ];		
		fft = new FFT( BUFFER_SIZE, 44100 );		
		spectrum = new float[ BUFFER_SIZE / 2 + 1 ];
		lastspectrum = new float[ BUFFER_SIZE / 2 + 1 ];
		spectralFlux = new ArrayList<>();
	}
	
	
	
	
	
	@Override
	public void run() {
		
	
		
		try {
			
			//int x = 0;
			Plot plot = new Plot( "Wave Plot", 512, 512 );
			
			ArrayList<Float> allSamples = new ArrayList<>();
			
			while( getSamples(buffer) ){
				
				for (int i = 0; i < buffer.length; i++) {
					allSamples.add( buffer[i] );
				}
				
//				buffer = new float[ BUFFER_SIZE ];	
//				float[] buffer2 = new float[ BUFFER_SIZE ];	
//				
//				FloatFFT_1D fft_do = new FloatFFT_1D(BUFFER_SIZE);
//				float[] fft = new float[BUFFER_SIZE * 2];
//				System.arraycopy(buffer, 0, fft, 0, BUFFER_SIZE);
//				fft_do.complexForward( fft );				
//				fft_do.realForward(buffer);
//				
//				fft.forward( buffer );
//				
//				System.arraycopy( spectrum, 0, lastspectrum, 0, spectrum.length ); 
//		        System.arraycopy( fft.getSpectrumReal(), 0, spectrum, 0, spectrum.length );
//					
//		        float flux = 0;
//		        for( int i = 0; i < spectrum.length; i++ ){
//		        	//flux += ( spectrum[i] - lastspectrum[i] );
//		        }			
//		        				
//		        //spectralFlux.add( flux );
//				
//				System.out.println("-------------------------------------");
//				
////				for (int i = 0; i < BUFFER_SIZE; i++) {
////					//System.out.println(buffer[i]);
//////					int index = i*2;
//////					float re = fft[ index    ];
//////					float im = fft[ index + 1];
//////					
//////					spectrum[i] = (float) Math.sqrt( Math.pow( re, 2 ) + Math.pow( im, 2 ) );
////					
////					
////					System.out.println(spectrum[i]);
////				}
////		
////				if(x>43)break;
////				x++;
				
				
			}
			
			float[] samples = new float[ allSamples.size() ];
			for (int i = 0; i < samples.length; i++) {
				samples[i] = allSamples.get(i);
			}
			plot.plot( new float[]{}, 44100 / 1024, Color.red );
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	
	
	

}
